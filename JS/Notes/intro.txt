Javascript : Javascript is a client side programming language which is used to build interactive website 
            using HTML and CSS.
            Javascript controls the behaviour of web pages and provides functionality to the webpages

            --Javascript was created a 1995(dec 4) by Breden Eich while working at Netscape.
                    Initially is is named as Mocha letter change as LiveScript. to use popurarity of java ,
                    Livescript renamed as Javascript

            Javascript runs in the Browesers becouse every Broweser Contains an engine to run javascript 
            called js Engine.

            The popular js engine are V8(chrome) ,xspiderMonkey(Mozilla),chakra(edge).
            It can also run without browsers .on server called node js

            javascript is high level dynamic programming language that makes websites alive 
            Think building website like Building a house 

            HTML --> the walls,windows,doors,(Structure)--what we server
            CS   --> Paintin,decorations,styles -----how its looks
            Js   --> electricity,water,switches  ---How its works
            


            How to include javascript in html ?
            --> we can include javascript in two ways they are
                1. Internal javascript
                2. External javascript

            1...Internal javascript :
                    we can include using 'script' as element
                        
                        eg: <script>
                                here you can write javascript
                            </script>
            
            2...External JAvascript :
                    we can include external javascript file(.js file) to html using script tag with src 'attribute'
                    
                    <script src="filepath"></script>

    In javascript there are two types of Commentes 
        1.. single line ==> //
        2.. Multi line  ==> /* comment */
    comments are used for user readablity purpose

    ==> ` `(backticks) = is called template litteral

-------------------------------------------------------------------------------------------------------
Varibles in Javascript :
    in javascript we can declared using keywords such as ("var,let,const")
    variables / literals are used to store the values 

    Difference between let ,var and const ==>
             var                    |             let                 |         const
                                    |                                 | const variables can not be 
var variable can be redeclared.     |   let and const cannot be       | changed                           
 eg : var a=10;                     |   redecalred                    |
        a=20;                       |                                 |
var variables can v=be changed      |   let varibles you can aslo be  |
    eg : var a=10;                  |   changed                       |
            a=20;                   |   eg :let a=10;                 |
                                    |            b=20;                |
var variables are function scoped   |   let and const are block       |
                                    |   scoped variables              |



To accept input ,we use one method called promt ,but promt accepts only strings.
let a = +prompt("Enter a value");

(+) is convert string datatype  to another datatype
----------------------------------------------------------------------------------------------------------
Date : 10/09/2025

DataTpes in Javascript :

    javascript is a dynamaic programming language . it means in javascript there is no fixed datatype
    in javascript to a variable .the datatype of a variable is decided by value  it is holding.

    There are two categories of datatypes :
        1 primitive datatype
        2 non primitive datatype

    1 ..primitive datatype :
        These datatype holds the value and comapres only value these datatypes in immuteable.
        There are 5 primitive datatype such as :
         1. number 
         2. string
         3. boolean
         4. undefined
         5. null
    
    Non - primitive datatype :
        This datatypes holds the value and comapres the address and refernce. these datatype are muteable.
        The basic non primitive datatypes are 
        1. function
        2. arrays
        3. objects

Can w change one datype to another dataype?
--> the process of changing one datatype to another datatype is call type casting .
    there are two types of type casting :
        1. implicit Typecasting : 
        2. explicit Typecasting :
        
        
        1. implicit Typecasting : 
            it is default or automatic conversion of datatypes based on opearation
            eg :10 + "5" =105(because number and string not added)

            eg : 5+4 =20,
            5+'4'='54',
            5 + + '4'=9,
            5*'4'=20 
        2. explicit Typecasting :
            it is the forced eay of converting one dataype to another   
                eg:5 + + '4'==> 5 + 4 ==> 9
                5 + Number('4') ==> 9
            
 number : any numirical value is number
            eg:4
            eg:4.5
        Every number can hava default methods such as toString,toPrecision etc...,
        numbers  also have math methods such as sqrt,cbrt,pow,ceil,floar etc...,
-------------------------------------------------------------------------------------------------------------
Date : 11/09/2025

1. toFixted() : it is used to return roundup value of n decimal digits
2. toPrecision() : it is used roundup value of n total digits
3. toString() : it is used to convert number to a string and differnt base system
            eg : let x=25.4164;
                x.toFixted(2) = 25.41
                x.toPrecision(3) = 25.4
                x = 25 ;
                x.toString(2) = 11001
    
    Most used Math Methods are :
            Math.sqrt(16)--returns square root of 16 is 4
            Math.cbrt(27)--returns cube root 27 is 3
            Math.pow(2,3) -- returns 2 power 3 is 8
            same thing can be done like (2**3) =8
            
            Math.abs(-5)--retuens absolute value is always positive =5
            Math.max(5,1,6,8) -- return maximum value =8
            Math.min(5,1,6,8) -- retuens minimum value =1
            Math.ceil(2.2) -- retuens nearest max value =3
            Math.floor(2.2) -- retuens nearest min value =2
            MAth.round(4.2) -- returns nearest integer = 4
            Math.random() -- returns random value 0 and 1
    
String : string is collection of characters
        eg : "abc123", "abc def" // space also count

    ---String can be writtern single or double quotes.
    ---There is no difference between but used alternatively in nested strings
    ---String can also dynamic called "template literal". it uses backticks for strings and ${}
       for dynamic values 

    let x="jhon"
    console,log(`The name is ${x}`) // The name is jhon
--------------------------------------------------------------------------------------------------------------
Date : 12/09/2025
              
    String Methods :  
        1 toUpperCase () -- used to convert string into uppercase 
        2 toLowerCase() -- used to return converted value of string to lower case
        3 length -- length used to return of number of character the string containes
        4 charAt(i) -- used to return character at index i
        5 indexOf('c') -- used to return first occurence of index of character c
        6 lastindexOf('c')-- used to return last occurence of index of character c
        7 startsWith('str) -- used to return true/false based on string is ending with str or not
        8 slice(s,e) -- use dto return substring from index s to index e-1
        9 slice(s)--used to return substring from index s to ending
        10 spilt(v)-- used to split the string based on value v and return an array of sub string 
            eg : "prasad".split('a') --> ['pr','s','d']
        11 replace(old,new) --- used to replace first occurence old value to new value.for all occurence we can use replaceAll
            eg : str = "Hello World";
            console.log(str.replaceAll('World','Welcome !')) ==>Hello Welcome !
        12 trim() -- used to retirn string after removing the spaces from starting and ending of string
        13      eg: str = "      World       ";
                    console.log(str.trim()) 


    1 Boolean : boolean used to store/false if converted to number ,true  is converted is 1 and 
                false is converted 0

    2 undefined : undefined is primitive datatype / value that represent uninitialized or non exiting element
                eg : let y;
                console.log(y); // undefined expects future occurence of value
    3 null : null is also the primitive value that indicates a variable has no value or no value
-------------------------------------------------------------------------------------------------------------------
Date : 12/09/2025

                    ======================>Operators<=======================
    Operators : Operators is used to perfrom opearation there are differnet types of Operators such as

        1 . Arithemetic Operators : +,-,*,/(direct division),% (reminder),**(power)
        2 . Reletional Operators : these Operators is used for camparision
                > , < , >= , <= , == (campares values) ,===(comapres values and datatypes) , != (not equal) ,!==(returns nrgations of ===)
        3 . Logical Operators : these Operators are used for combining statements logically
                && , || , !
        4 . increment and decrement : these are unary Operator which is use to increment and decrement
                --> pre - increment --it first update value and returns the value
                --> post - increment -- it first returns the value and update
                ==> similar to decrement also
        5 . ternary Operator or Conditional Operator : it is the short hand Operator  used to check the Condition true and false and make dicision based on that vslue
                let a=10;
                let c=(a>5) ? 20 : 30;
        6 . nullish coalescing Operator : it will check two values and returns first value if it is not indefined or null else  it will return second value 
                let a=10;
                let b=20;
                let c=a ?? b;
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Date : 15/09/2025

Control Statement : 
    The Decision making statemenet this are called control statement. which are used to control the flow the code based on Condition
    most used Decision making statement are use if and switches

    if : if is use das control statement where it leads to a block of code if the Condition is true 
        there are multiple varitions for if such as :

            1.simple if : 
                if(Condition){
                    //statement
                } 
            it deals wit1h if on only whe condition is true and it exexutes block of statement

            2.if-else :
                if(condition){
                    //statement
                }else{
                    // statement
                }
                if the condition is true ,it will lead to the the then block else it will leads to the else block

            3.if-else if:
                if(condition 1){
                    //statement
                }
                else if(condition 2){
                    // statement
                }
                else{
                    //statement
                }
                if condition is true it will lead to the then block else again it check another   
                condition and reapeat this until last else part
            
            4.nested if : we can even keep an if statement inside another if called nested if
                if(condition){
                    if(condition){
                        //statement
                    }
                }
                else if(condition){
                    //statement
                }
                else{
                    //statement
                }

    Switch : switch works with multiple condions using cases its alternative approach on if else if 
            each case by terminated by using "break" else it falls to the next case and always needs a case
            for 'default'  entry

            switch(Condition){
                case 1: statement;break;
                .
                .
                .
                case n: //statement;break;
                default: //statement
            }
        
--------------------------------------------------------------------------------------------------------------------------------------
Date :16/09/2025

    Loops : Loops are used to iterate certain steatement again and again until a condition fails
            There are two types of loops-->

            1..Entry Control Loops
            2..Exit Control Loops

            1--> Entery Control loops :
                This loops are used to check the condition at the starting of loop and run the statemenet
                if the condition is true once the statements are over it again check the condion and reapeat the preocess

                1-->While : while is a entry control loop which uses condition and updation and inilization in differnet statement
                        Syntax: 
                                inilization;
                                while(condition){
                                    //statement
                                    updation
                                }

                            eg: print num 1 to 10 using while loop

                            let i=1;
                            while(i<=10){
                                console.log(`${i} `);
                                i++;
                            }

                2--> For :  for is a entry control loop which is use to iterate cetain statement bu using
                            inilization ,condition and updation

                            syntax : for(inilization;condition;updation){
                                statement
                            }

                            eg :print alternate letters of given string (input : prasad o/p:p a a)
                            let s="prasad"
                            for(i=1;i<=x.length-1;i+=2){
                                    console.log(x.charAt(i));
                            }

                            eg :let arr=[5,4,3,2,1];

                            let[] arr={5,4,3,2,1};
                            for(i=0;i<arr.length;i++){
                                console.log(arr[i])
                            }
        
        This is called standard -for
        but in javascript there are other variations of for such as
        "foe...of","for...in"

        for-of :  it is used to iterate array element 
            syntax : for(let i of arrayname){
                //statement
            }

        eg : let arr=[5,4,3,2,1];
             for(let i of arr){
                console.log(i)
             }

        for-in : it will used to iterate array indexes/address
             syntax : for(let i in arrayname){
                //statement
            }

        eg : let arr=[5,4,3,2,1];
             for(let i in arr){
                console.log(i)
             } 

    Do-while : do-while is exit control loop is check the condition at the exit body 
                is the condition is true ,it repeats the loop else it terminates

                syntax: inilization;
                        do{
                            //statement
                        }while(condition);
                
                eg : print even nums between 1 to 20 

                let i=2;
                do{
                    console.log(i+" ");
                    i+=2
                }while(i<=20);
--------------------------------------------------------------------------------------------------------------------------------------
Date :17/09/2025

    Tasks : 
        1. write js code to print sum of array elements

        let arr=[5,4,3,2,1];
        let sum=0;
        for(let i=0;i<arr.length;i++){
            sum+=arr[i];
        }
        console.log(`Sum of array elements : `+sum);

        2. write a js code to check wether sum of digit is eqaual to product of digit for a given num

        let n = +prompt("enter num");
        sum=0;
        let prod=1;
        while(n!=0){
            let rem=n%10;
            sum+=rem;
            prod*=rem;
            n=Math.floor(n/10);
        }
        console.log("sum:"+sum);
        console.log("prod:"+prod)
        if(sum==prod){
            console.log("spy num");
        }
        else{
            console.log("not spy num");
        }

        3. using loops find the sum of nested arrays and print them
            eg : [[10,20,10,50],[0,10,30,40],[10,10,10,10]]

                         arr = [[10,20,10,50],[0,10,30,40],[10,10,10,10]]
             for(let i=0;i<arr.length;i++){
                let sum=0
                for(let j=0;j<arr[i].length;j++){
                    sum+=arr[i][j]
                }
                console.log(sum+" ")
             }
            // second type
             for(let i of arr){
                let sum=0
                for(let j of i){
                    sum+=j;
                }
                console.log(`the sum of test ${+i+1} is ${sum}`)
             }
----------------------------------------------------------------------------------------------------------------------
Date : 18/09/2025

Function : function is block of code which can be reusable.
            Insted of implementing whole code we can divided the logical code into logical parys called functions
                Main Advantages : 1..Reusability
                                  2..Modularity
                                  3..Easy to understand amd debug
            
            Every function will have function declration,funtion defination and function call
        
        Syntax: function function_name(parameters){
            //defination
        }
        function_name(arguments);

        Eg..Simple function : write a function that prints hello world and call it
            function demo(){
                console.log("Hello World");
            }
            demo();

        Function can also accept parameters which are passed while calling the function
        
        Eg : write a function that takes two values and print thair sum
        
            function Sum(a,b){
            let add=a+b;
                console.log("Sum is : "+add);
            }
            Sum(10,20);//30

        Function can even return the values 

        Eg : write a function that accepats a stirng and retrun number of characters

            function Charcters(str){
                if(typeof(str)=='string'){
                     return str.length;
                }
                else{
                     return "input only strings"
                }
            }
            let count=Charcters(1);
            console.log(count)

        Function as also treated as a variable in javascript so that whole function defination is stored
        as a varibale we can even create function expressions

            eg :
                 function Charcters(){
                    console.log("count")
                }
                console.log(Charcters)//print function

                o/p ://whole function print
                ƒ Charcters(){
                    console.log("count")
                }

                eg :

                let x=function ()//function expression
                {
                    console.log("count")
                }
                x()
                console.log(x)

                o/p :

                count
                ƒ (){
                        console.log("count")
                    }

                eg : write a function that print area circle usnig parameters

                function area(r){
                    return Math.PI*r*r;
                }
                let x=area(5)
                console.log(x)//78.53981633974483
---------------------------------------------------------------------------------------------------------------------
Date : 19/09/2025

    Annanomus Function : is a without name is called fun expression or Annanomus function

    Callback Functions : callback function are the functions which are passed as parameter to a 
                        another function

                        eg : function mad(){
                            console.log("I'm mad now");
                        } 
                        function  mainFun(x){
                            x();
                        }
                        mainFun(mad);

                        o/p :I'm mad now

                        eg : function message(){//callback function
                            console.log(`It Is a message`);
                        }
                        function rani(p){
                            p();
                        }
                        rani(message);//higher of function

                        o/p : It Is a message

                        eg : 
                        function convert(s){
                            return s.toUpperCase();
                        }
                        function firstLetter(fun){
                            let x= fun("prasad");
                            return x[0];
                        }
                        console.log(firstLetter(convert));//p

                        eg : 
                        function greet(name,fun){
                            fun(name);
                        }
                        function sayName(n){
                            console.log(`My name is ${n}`);
                        }
                        console.log(greet("prasad",sayName));//My name is prasad

        sayName is function which is passed int the parameter of greet,so sayName is callback
        function and greet (function which receives callback) is higher order function 


    Closures : Closures is a memory technique in which inner loop remember the outer loop
                values even after outer execution ended

                eg : 
                    function outer(){
                        let a=5;
                        function inner(){
                            ++a;
                            console.log(a);
                        }
                        return inner;
                    }
                    let x=outer();
                    x();//6
                    x();//7
                    x();//8
            
    IIFE (immediate Invoke Function expression) : an IIFE is a function that is defined and invoked 
            called immediately.It is used to hide the data from global scope

            eg :
                (function(){
                     console.log(`hi`);
                })();//hi
            eg : (function(){
                let pass="123456";
                    console.log(`hi`);
                })();
            console.log(pass)//error
----------------------------------------------------------------------------------------------------------------------------------------------------------
Date : 22/09/2025

        Array : - Array is a Collection of element.arrays are represented by square brackets and maintain address of every element as index
                  index start from '0'
                - Arrays are like a hotel with multiple rooms cantian ecahelement in a room and each room
                  have a number room numbers starts with 0

                  eg: let arr=[1,2,3,4,5];
                  //array out if bound index is called ==>'undefined' in javascript

                  let arr=[5,9,6,7,3];
                  console.log(arr,arr[5]);
                  arr[20]=49;
                  console.log(arr)//total 21 values

                  o/p:
                    (5) [5, 9, 6, 7, 3]
                    script.js:4 (21) [5, 9, 6, 7, 3, empty × 15, 49]
                    length = 21

        Array Methods : 
            1. Length : length is returns the total numbers of elements(last value index + 1) in array
                eg : 
                  let arr=[5,9,6,7,3];
                  console.log(arr,arr[5]);
                  arr[20]=49;
                  console.log(arr)//tottal 21 values

                  o/p:
                    (5) [5, 9, 6, 7, 3]
                    script.js:4 (21) [5, 9, 6, 7, 3, empty × 15, 49]
                    length = 21

            2. push(values) : it is used to add elements to the end of the array
                eg: 
                    let arr=[21,22,23,24];
                    arr.push("raj");
                    console.log(arr)

                    o/p : [21, 22, 23, 24, 'raj']
            3. pop() : it is used to remove element at the end of the array
                    
                    let arr=[21, 22, 23, 24, 'raj'];
                    arr.pop("raj");
                    console.log(arr)

                    o/p:[21,22,23,24]

            4. unshift(values) : it is used to add elements to the starting of the array


                    arr=[21, 22, 23, 24, 'raj'];
                    arr.unshift(20);
                    console.log(arr)

                    o/p :[20, 21, 22, 23, 24, 'raj']

            5. shift() : it is used to the remove the first element of the array


                    arr=[20, 21, 22, 23, 24, 'raj'];
                    arr.shift(20);
                    console.log(arr)

                    o/p :[21, 22, 23, 24, 'raj']

            6. Splice : it is used to add element at any index and elements ata any index

                splice(strating_index,deleteCound,inserting_values)

                let arr=[1,2,3,4,5]
                splice(1,2)//2 and 4 will deleted 1,3 and 5 remains

                arr=[5,6,7,8]
                splice(1,0,11,12,13)//[5,11,12,13,6,7,8];

                eg :
                arr=["sheldon","monica","rachal","ross","phoebe","shinchan"];

                arr.pop()
                console.log(arr)//['sheldon', 'monica', 'rachal', 'ross', 'phoebe']

                arr.push("joey")    
                console.log(arr)// ['sheldon', 'monica', 'rachal', 'ross', 'phoebe', 'joey']

                arr.shift();
                console.log(arr)// ['monica', 'rachal', 'ross', 'phoebe', 'joey']

                arr.unshift("chandler")
                console.log(arr)//['chandler', 'monica', 'rachal', 'ross', 'phoebe', 'joey']

                arr.splice(3,0,"emma")
                console.log(arr)//['sheldon', 'monica', 'rachal', 'emma', 'ross', 'phoebe', 'joey']

            7. Foreach(callback funtion(element,index)) : foreach is used to paas a callbck function to  each and every
                of the array and for every time , it will accept element and index

                eg : 
                    let arr = [1,2,3,4];
                    arr.foreach(function(e,i){
                        console.log(e);//1 2 3 4
                    })
                //use foreach and print eachb element cube in given array
                    arr=[1,2,3,4,5]
                    arr.forEach(function(e,i){
                         console.log(e*e*e);//1 8 27 64 125
                         //or
                         console.log(e**3);//1 8 27 64 125
                    })
                
                    arr=[1,2,3,4,5]
                    let values=arr.forEach(function(e,i){
                        console.log(e%2==0);//false true false ture false
                    })
---------------------------------------------------------------------------------------------------------------------------------------------------------
Date : 23/09/2025
            
            8. Map(callback funtion(element,index)) : map is used to pass a callback function to each and every element 
                    of a array return a value a for each and every eleement of the array

                    eg :let arr=[1,2,3,4]
                    let x=arr.map((e,i)=>{
                        return e*e;
                    })
                    console.log(x)//1 4 9 16 
            
            9. filter(callback funtion(element,index)) : filter is also similar to map but it returns only the element whose condition is true

                    eg : let arr=[5,6,7,8,9];
                        let x=arr.filter((e,i)=>e>=8)
                        console.log(x)//[8,9]
            
            10. indexOf('ele') : it is used to return the first occurences of the element's index

                    eg : let arr=[1,2,3,4,5,6,4]
                    console.log(arr.indexPf(4),arr.lastIndexOf(4));

                    let x=arr.find((e,i)=>{
                        return ele%2==0;
                    })
                    console.log(x)//3 6 
            
            11. find(callback funtion(element,index)) : works as similarly as a filter but returns only first element that satisfies the condion
                we can alternatives findIndex,findLast,findIndexIndex

            12. reverse() : it used to reverse the given array

            13. reduce(callbackfunction(prev,curr),Initial_value) : it is used to find cumulatives values in given array
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------


        
